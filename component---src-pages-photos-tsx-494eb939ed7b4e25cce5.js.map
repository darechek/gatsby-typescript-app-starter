{"version":3,"sources":["webpack:///./src/helpers/fetch/pagination.ts","webpack:///./src/helpers/fetch/readImageBlobAsDataURL.ts","webpack:///./src/helpers/fetch/buildRequest.ts","webpack:///./src/components/ui/ImageCard/index.tsx","webpack:///./src/data/models/Photos/index.ts","webpack:///./src/data/api/photos/index.ts","webpack:///./src/store/state/photos/operations.ts","webpack:///./src/store/state/photos/actions.ts","webpack:///./src/store/state/photos/selectors.ts","webpack:///./src/components/ui/Tiles/Tile/index.tsx","webpack:///./src/components/ui/Tiles/index.tsx","webpack:///./src/domains/Photos/Card/index.tsx","webpack:///./src/domains/Photos/List/index.tsx","webpack:///./src/domains/Photos/View/index.tsx","webpack:///./src/domains/Photos/index.tsx","webpack:///./src/pages/photos.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/SEO/index.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Layout/Header/index.tsx","webpack:///./src/components/ui/FontIcon/index.tsx","webpack:///./src/components/LanguageSelector/index.tsx","webpack:///./src/components/Layout/Footer/index.tsx","webpack:///./src/components/Layout/index.tsx"],"names":["hasMoreData","options","offset","previousLength","length","totalCount","isUndefined","isNumber","updatePaginationAttributes","params","countPerPage","previousTotalCount","page","Math","floor","Object","assign","readImageBlobAsDataURL","_ref","asyncToGenerator_default","regenerator_default","a","mark","_callee","imageBlob","imageReader","wrap","_context","prev","next","FileReader","abrupt","Promise","resolve","addEventListener","load","removeEventListener","result","readAsDataURL","stop","_x","apply","this","arguments","buildResponseOutput","response","bodyObject","status","headers","statusCode","body","parameters","authorization","_options$method","method","_options$contentType","contentType","_options$protocol","protocol","host","api","urlPath","_options$variables","variables","requestUrl","variable","parameter","outputObject","imageAsString","finalError","RequestMethod","GET","RequestContentTypes","JSON","RequestProtocol","HTTPS","noCache","_","random","pathname","path","url","slashes","getRequestURL","hasOwnProperty","replace","t0","qs","t1","FORM","stringify","FormData","append","Accept","Content-Type","Authorization","fetch","sent","ok","IMAGE","blob","json","t2","t3","t4","buildRequest","EImageCard","_buildRequest","PhotoModel","props","toJSON","id","title","loadPhotos","apiParams","_parameters$page","_parameters$countPerP","_start","responseObject","xTotalCount","data","errorObject","_statusCode","_body","DEFAULT_PAGE_SIZE","_limit","get","Number","map","entity","APIResponseStatus","SUCCESS","ERROR","dispatch","_updatePaginationAttr","list","_responseObject$total","hasMore","type","Types","FETCHING","API","payload","isFetching","LOADED","FETCH_ERROR","console","log","resetPhotos","RESET","selectPhotos","state","photos","selectPhotosList","selectHasMore","selectIsFetching","Tile","children","colSpan","rowSpan","className","otherProps","objectWithoutPropertiesLoose_default","style","gridColumn","gridRow","react","cn","Tiles","gutter","tilesRef","React","tiles","current","setProperty","ref","ImageCard","_ref$type","RECTANGLE","backgroundImage","PhotoCard","_ref$data","ui_ImageCard","useDispatch","photosList","useSelector","index_es","defaultMessage","text","SEO","Tiles_Tiles","item","index","Tiles_Tile","key","onClick","navigate","Card","photo","find","selectPhotoById","info","values","es","to","Photos","basepath","List","View","PhotosPage","react_default","createElement","Layout","domains_Photos","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","d","__webpack_exports__","createContext","PropTypes","object","string","isRequired","func","description","lang","meta","site","_public_static_d_2709607644_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","baseMeta","name","content","property","author","react__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","concat","defaultProps","ProdPageRenderer","location","pageResources","InternalPageRenderer","propTypes","shape","Header","_ref$siteTitle","siteTitle","gatsby_browser_entry","FontIcon","classes","translations","defineMessages","en","pt","injectIntl","intl","_ref$label","label","locale","selectLocale","value","onChange","event","changeLanguage","target","keys","formatMessage","Footer","Date","getFullYear","href","ui_FontIcon","components_LanguageSelector","_ref$displayFooter","displayFooter","_3821914999","Layout_Header","Layout_Footer"],"mappings":"wMAkBaA,EAAc,SAACC,GAA0C,IAC7DC,EAA+CD,EAA/CC,OAAQC,EAAuCF,EAAvCE,eAAgBC,EAAuBH,EAAvBG,OAAQC,EAAeJ,EAAfI,WAExC,OAAIC,YAAYJ,IAAWI,YAAYH,IAAmBI,YAASH,IAAWG,YAASF,GAC/ED,EAAS,GAAKA,EAASC,EAAa,KAGxCE,YAASH,KAAWG,YAASF,KAAgBE,YAASL,KAAWK,YAASJ,MAEtEC,EAAS,IADMF,IAAkBC,GAAkB,IAAKC,EAC3BC,EAAa,IAatCG,EAA6B,SACzCC,GACO,IACCC,EAAqCD,EAArCC,aAAcC,EAAuBF,EAAvBE,mBAChBT,EAAiBO,EAAjBP,OAAQU,EAASH,EAATG,KAEd,OAAIV,GAAUU,EACNH,EAGJF,YAASI,IACRL,YAAYJ,IAAWI,YAAYM,IACtCH,EAAOG,KAAOC,KAAKC,MAAMH,EAAqBD,GACvCD,GAITM,OAAAC,OAAA,GACIP,EADJ,CAECG,KAAM,sDCzCOK,cAZoB,eAAAC,EAAAC,IAAAC,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAC/BJ,EAAc,IAAIK,WADaH,EAAAI,OAAA,SAE9B,IAAIC,QAAgB,SAAAC,GAK1BR,EAAYS,iBAAiB,OAJhB,SAAPC,IACLV,EAAYW,oBAAoB,OAAQD,GACxCF,EAAQR,EAAYY,UAEsB,GAC3CZ,EAAYa,cAAcd,MARU,wBAAAG,EAAAY,SAAAhB,MAAH,gBAAAiB,GAAA,OAAAtB,EAAAuB,MAAAC,KAAAC,YAAA,ICiBnC,SAASC,EACRC,EACAC,QACI,IADJA,MAAsC,IAClC,IACIC,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,QAChB,MAAO,CACNC,iBACC,OAAOF,GAERC,cACC,OAAOA,GAERE,WACC,OAAOJ,uCAYH,SAAAvB,EAAmEtB,GAAnE,IAAAkD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAf,EAAAgB,EAAAlB,EAAAH,EAAAsB,EAAA3C,EAAA4C,EAAAC,EAAA,OAAAjD,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OA4CN,IAAWoC,KA3CLd,EAAelD,EAAfkD,WAELC,EASGnD,EATHmD,cAHKC,EAYFpD,EARHqD,cAJK,IAAAD,EAIIiB,IAAcC,IAJlBlB,EAAAE,EAYFtD,EAPHuD,mBALK,IAAAD,EAKSiB,IAAoBC,KAL7BlB,EAAAE,EAYFxD,EANHyD,gBANK,IAAAD,EAMMiB,IAAgBC,MANtBlB,EAOLE,EAKG1D,EALH0D,KACAC,EAIG3D,EAJH2D,IACAC,EAGG5D,EAHH4D,QATKC,EAYF7D,EAFH8D,iBAVK,IAAAD,EAUO,GAVPA,EAYF7D,EADH2E,UAOAzB,EAAUpC,OAAAC,OAAA,GAAQmC,EAAR,CAAoB0B,EAAGhE,KAAKiE,YAqBnCd,EAlBkB,WACrB,IAAMe,EAAWnB,EAAMoB,OAAUpB,EAAKC,GAAWA,EACjD,OAAKF,EAIEsB,SAAW,CACjBC,SAAS,EACTxB,WACAC,OACAoB,aAPOA,EAeQI,GAKMpB,EAClBA,EAAUqB,eAAenB,KAC5BD,EAAaA,EAAWqB,QAAX,IAAuBpB,EAAvB,IAAoCF,EAAUE,KA9CvD,IAsDFd,EAtDE,CAAAxB,EAAAE,KAAA,SAAAF,EAAA2D,GAuDGhC,EAvDH3B,EAAAE,KAAAF,EAAA2D,KAwDChB,IAAcC,IAxDf,2BAyDHP,GAAU,IAAQuB,YAAapC,GAzD5BxB,EAAAI,OAAA,oBAAAJ,EAAA6D,GA4DKhC,EA5DL7B,EAAAE,KAAAF,EAAA6D,KA6DGhB,IAAoBC,KA7DvB,GAAA9C,EAAA6D,KAgEGhB,IAAoBiB,KAhEvB,2BA8DDvC,EAAOuB,KAAKiB,UAAUvC,GA9DrBxB,EAAAI,OAAA,oBAkED,IAAWmC,KADXhB,EAAO,IAAIyC,SACaxC,EACnBA,EAAWiC,eAAelB,IAC7BhB,EAAK0C,OAAO1B,EAAWf,EAAWe,IApEnC,OAAAvC,EAAAI,OAAA,2BAAAJ,EAAAI,OAAA,2BAgFAiB,EAAuB,CAC5B6C,OAAQrC,EACRsC,eAAgBtC,GAMbJ,IACHJ,EAAQ+C,cAAgB3C,GAzFnBzB,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAgGkBmE,MAAMhC,EAAY,CACxCV,SACAN,UACAE,SAnGI,YAgGCL,EAhGDlB,EAAAsE,MAsGSC,GAtGT,CAAAvE,EAAAE,KAAA,eAuGEgB,EAvGF,WA0GDsB,EAAe,GACfX,IAAgBgB,IAAoB2B,MA3GnC,CAAAxE,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GA4GoBgB,EAASuD,OA5G7B,eA4GE5E,EA5GFG,EAAAsE,KAAAtE,EAAAE,KAAA,GA6GwBZ,EAAuBO,GA7G/C,QA6GE4C,EA7GFzC,EAAAsE,KA8GJ9B,EAAeC,EA9GXzC,EAAAE,KAAA,wBAAAF,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAiHkBgB,EAASwD,OAjH3B,QAiHHlC,EAjHGxC,EAAAsE,KAAAtE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA2E,GAAA3E,EAAA,yBAAAA,EAAAI,OAAA,SAsHEa,EAAuBC,EAAUsB,IAtHnC,eAAAxC,EAAAC,KAAA,GAAAD,EAAA4E,GAAA5E,EAAA,UAAAA,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GA0HeF,EAAA4E,GAAMF,OA1HrB,QA0HJhC,EA1HI1C,EAAAsE,KAAAtE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA6E,GAAA7E,EAAA,UA4HJ0C,EAAU1C,EAAA4E,GA5HN,cA8HC3D,EAAmBjB,EAAA4E,GAAWlC,GA9H/B,yBAAA1C,EAAAY,SAAAhB,EAAA,0DAkIQkF,IC7KHC,ED6KGD,EAlIR,SAAPjE,GAAA,OAAAmE,EAAAlE,MAAAC,KAAAC,uCErCqBiE,aAGpB,SAAAA,EAAYC,GACXnE,KAAKmE,MAAQA,qBAmBdC,OAAA,WACC,MAAO,CACNC,GAAIrE,KAAKqE,GACTC,MAAOtE,KAAKsE,MACZ/B,IAAKvC,KAAKuC,kDAnBX,OAAOvC,KAAKmE,iCAIZ,OAAOnE,KAAKmE,MAAME,iCAIlB,OAAOrE,KAAKmE,MAAMG,kCAIlB,0CAA2CtE,KAAKmE,MAAME,GAAtD,aCzBWE,EAAU,eAAA/F,EAAAC,IAAAC,EAAAC,EAAAC,KAAG,SAAAC,EAAO4B,GAAP,IAAA+D,EAAAhH,EAAAiH,EAAAvG,EAAAwG,EAAA1G,EAAA2G,EAAAC,EAAArE,EAAAD,EAAAE,EAAAqE,EAAAlH,EAAAmH,EAAAC,EAAAC,EAAAC,EAAA,OAAAvG,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAErBsB,IACKjD,EAAuDiD,EAAvDjD,OADOiH,EACgDhE,EAA/CvC,YADD,IAAAuG,EACQ,EADRA,EAAAC,EACgDjE,EAArCzC,oBADX,IAAA0G,EAC0BQ,IAD1BR,EAETC,EAAS9G,YAASL,GAAUA,EAASU,EAAOF,EAClDwG,EAAY,CAAEG,SAAQQ,OAAQnH,IALNiB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EASK4E,EAAiC,CAC7D9C,KAAM,+BACNE,QAAS,SACTV,WAAY+D,IAZW,cASlBI,EATkB3F,EAAAsE,KAehBhD,EAA8BqE,EAA9BrE,WAAYD,EAAkBsE,EAAlBtE,QAASE,EAASoE,EAATpE,KACvBqE,EAAcvE,EAAQ8E,IAAI,kBAAoB,EAC9CzH,EAAa0H,OAAOR,GACpBC,EAAOtE,EAAK8E,IAAI,SAAAC,GAAM,OAAI,IAAIrB,EAAWqB,KAlBvBtG,EAAAI,OAAA,SAmBjB,CACNgB,OAAQmF,IAAkBC,QAC1BlF,aACAuE,OACAnH,eAvBuB,cAAAsB,EAAAC,KAAA,GAAAD,EAAA2D,GAAA3D,EAAA,SA0BlB8F,EA1BkB9F,EAAA2D,GA2BhBrC,EAAqBwE,EAArBxE,WAAYC,EAASuE,EAATvE,KACd,CACLH,OAAQmF,IAAkBE,MAC1BnF,aACAC,QA/BuB,yBAAAvB,EAAAY,SAAAhB,EAAA,kBAAH,gBAAAiB,GAAA,OAAAtB,EAAAuB,MAAAC,KAAAC,YAAA,WCGVsE,EAAa,SAACxG,GAAD,sBAAAS,EAAAC,IAAAC,EAAAC,EAAAC,KAAgC,SAAAC,EAAO8G,GAAP,IAAAC,EAAApI,EAAAU,EAAAF,EAAA4G,EAAAiB,EAAAC,EAAAnI,EAAAD,EAAAqI,EAAA,OAAArH,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAyG,EAClB9H,EAA2BC,GAAU,CAAEC,aAAc,KAApFR,EADiDoI,EACjDpI,OAAQU,EADyC0H,EACzC1H,KAAMF,EADmC4H,EACnC5H,aACtB2H,ECTmD,CACnDK,KAAMC,IAAMC,WDM6CjH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAI3BgH,EAAe,CAAE3I,SAAQU,OAAMF,iBAJJ,OAIlD4G,EAJkD3F,EAAAsE,KAK1CsC,EAAyBjB,EAA/BE,KALgDgB,EAKjBlB,EAAnBjH,kBALoC,IAAAmI,EAKvB,EALuBA,EAMhDpI,EAAWmI,EAAXnI,OACFqI,EAAUzI,EAAY,CAAEI,SAAQC,eACtCgI,GCX2BS,EDWL,CAAEP,OAAME,UAASM,YAAY,GCXkB,CACtEL,KAAMC,IAAMK,OACZF,aDCyDnH,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA2D,GAAA3D,EAAA,SAUxD0G,ECRoD,CACrDK,KAAMC,IAAMM,cDQXC,QAAQC,IAARxH,EAAA2D,IAXwD,yBAAA3D,EAAAY,OCH9B,IAACuG,GDG6BvH,EAAA,kBAAhC,gBAAAiB,GAAA,OAAAtB,EAAAuB,MAAAC,KAAAC,YAAA,IAebyG,ECTc,iBAAsB,CAChDV,KAAMC,IAAMU,gBCdAC,SAAe,SAACC,GAAD,OAAuBA,EAAMC,SAE5CC,EAAmB,SAACF,GAAD,OAAuBD,EAAaC,GAAOhB,MAK9DmB,EAAgB,SAACH,GAAD,OAAuBD,EAAaC,GAAOd,SAE3DkB,EAAmB,SAACJ,GAAD,OAAuBD,EAAaC,GAAOR,wDCsB5Da,EArBmC,SAAA1I,GAA8D,IAA3D2I,EAA2D3I,EAA3D2I,SAAUC,EAAiD5I,EAAjD4I,QAASC,EAAwC7I,EAAxC6I,QAASC,EAA+B9I,EAA/B8I,UAAcC,EAAiBC,IAAAhJ,EAAA,8CAC3GiJ,EAA6B,GAOjC,OANIL,IACHK,EAAMC,WAAN,QAA2BN,EAA3B,WAEGC,IACHI,EAAME,QAAN,QAAwBN,EAAxB,WAGAO,EAAA,oBAAAvJ,OAAAC,OAAA,CAEEgJ,UAAWO,IAAG,OAAQP,GACtBG,SACGF,GAGHJ,ICfSW,UAA8C,SAAAtJ,GAAqC,IAAlCuJ,EAAkCvJ,EAAlCuJ,OAAQT,EAA0B9I,EAA1B8I,UAAWH,EAAe3I,EAAf2I,SAC1Ea,EAAWC,SAA6B,MAS9C,OAPAA,YAAgB,WAAM,IACJC,EAAUF,EAAnBG,QACJD,IAAUZ,GAAaS,GAC1BG,EAAMT,MAAMW,YAAY,iBAAkBL,IAEzC,CAACA,EAAQT,IAGXM,EAAA,qBAAKS,IAAKL,EAAUV,UAAWO,IAAG,QAASP,IACzCH,sBPpBQnD,yDAWZ,IAWesE,EAX6C,SAAA9J,GAAqD,IAAlD+D,EAAkD/D,EAAlD+D,IAAkDgG,EAAA/J,EAA7CwH,YAA6C,IAAAuC,EAAtCvE,EAAWwE,UAA2BD,EAAhBjB,EAAgB9I,EAAhB8I,UAC1FnD,EAAQ,CACbmD,UAAWO,IAAGP,EAAW,YAAZ,cAAuCtB,GACpDyB,MAAO,CACNgB,gBAAe,QAAUlG,EAAV,OAIjB,OAAOqF,EAAA,oBAASzD,IQNFuE,UAPwC,SAAAlK,GAAA,IAAAmK,EAAAnK,EAAGsG,KAAQvC,EAAXoG,EAAWpG,IAAK+B,EAAhBqE,EAAgBrE,MAAhB,OACtDsD,EAAA,qBAAKN,UAAU,aACdM,EAAA,cAACgB,EAAD,CAAWrG,IAAKA,IAChBqF,EAAA,qBAAKN,UAAU,oBAAoBhD,MCuDtB2D,iBAjD0C,WACxD,IAAMtC,EAAWkD,cACXC,EAAaC,YAAYhC,GACzBhB,EAAUgD,YAAY/B,GACtBX,EAAa0C,YAAY9B,GAE/BgB,YAAgB,WACftC,EAASpB,EAAW,CAAErG,KAAM,EAAGF,aAXZ,GAW0BC,mBAAoB6K,EAAWpL,WAC1E,IAcH,OACCkK,EAAA,cAAAA,EAAA,cACCA,EAAA,cAACoB,EAAA,EAAD,CAAkB3E,GAAG,mBAAmB4E,eAAe,UACrD,SAAAC,GAAI,OAAItB,EAAA,cAACuB,EAAA,EAAD,CAAK7E,MAAO4E,MAGtBtB,EAAA,qBAAKN,UAAU,UACdM,EAAA,cAACwB,EAAD,CAAO9B,UAAU,iBAAiBwB,EAAWxD,IAjBvB,SAAC+D,EAAkBC,GAAnB,OACxB1B,EAAA,cAAC2B,EAAD,CAAMC,IAAKF,EAAOG,SAHMpF,EAGmBgF,EAAKhF,GAHT,kBAAMqF,mBAAQ,YAAarF,MAIjEuD,EAAA,cAAC+B,EAAD,CAAW7E,KAAMuE,KAJK,IAAChF,MAqBpBgC,GAAcN,GACf6B,EAAA,qBAAKN,UAAU,mBACdM,EAAA,wBAAQ6B,QAfW,WACvB9D,EAASpB,EAAW,CAAEvG,aAvBH,GAuBiBC,mBAAoB6K,EAAWpL,YAe9DkK,EAAA,cAACoB,EAAA,EAAD,CAAkB3E,GAAG,kBAAkB4E,eAAe,gBAKxD5C,GACAuB,EAAA,qBAAKN,UAAU,mBACdM,EAAA,cAACoB,EAAA,EAAD,CAAkB3E,GAAG,iBAAiB4E,eAAe,qBCpB5ChB,iBAtBwC,SAAAzJ,GAAY,IAAT6F,EAAS7F,EAAT6F,GACnDuF,EAAQb,YLdgB,SAAC1E,GAAD,OAAgB,SAACwC,GAAD,OAC9CE,EAAiBF,GAAOgD,KAAK,SAAAD,GAAK,OAAIA,EAAMvF,KAAOA,KKazByF,CAAgBzE,OAAOhB,KAC3C0F,EAAOH,EAAQA,EAAMvF,GAAK,YAChC,OACCuD,EAAA,cAAAA,EAAA,cACCA,EAAA,cAACoB,EAAA,EAAD,CAAkB3E,GAAG,kBAAkB4E,eAAe,aAAae,OAAQ,CAAE3F,GAAI0F,IAC/E,SAAAb,GAAI,OAAItB,EAAA,cAACuB,EAAA,EAAD,CAAK7E,MAAO4E,MAEtBtB,EAAA,qBAAKN,UAAU,SACbsC,EACAhC,EAAA,cAAC+B,EAAD,CAAW7E,KAAM8E,IAEjBhC,EAAA,cAACoB,EAAA,EAAD,CAAkB3E,GAAG,kBAAkB4E,eAAe,0BAA0Be,OAAQ,CAAE3F,QAE3FuD,EAAA,cAACqC,EAAA,KAAD,CAAMC,GAAG,UAAU5C,UAAU,eAC5BM,EAAA,cAACoB,EAAA,EAAD,CAAkB3E,GAAG,yBAAyB4E,eAAe,2BCNnDkB,EAjBkC,WAChD,IAAMxE,EAAWkD,cAQjB,OANAZ,YAAgB,WACf,OAAO,WACNtC,EAASe,OAER,IAGFkB,EAAA,cAACqC,EAAA,OAAD,CAAQG,SAAS,UAChBxC,EAAA,cAACyC,EAAD,CAAY/H,KAAK,MACjBsF,EAAA,cAAC0C,EAAD,CAAWhI,KAAK,UCXJiI,UANI,kBAClBC,EAAA7L,EAAA8L,cAACC,EAAA,EAAD,KACCF,EAAA7L,EAAA8L,cAACE,EAAD,6BCRF,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oCCA/C,IAAAK,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,GAAAI,EAAAJ,EAAAE,EAAAC,GAAAE,EAAAL,EAAA,IAAAM,EAAAN,EAAAE,EAAAG,GAAAL,EAAAO,EAAAC,EAAA,sBAAAF,EAAA7M,IAAAuM,EAAA,KAa2BjD,IAAM0D,cAAc,IAuDvCC,IAAUC,OACTD,IAAUE,OAAOC,WAChBH,IAAUI,KACRJ,IAAUI,6ECnDhB7C,EAAqC,SAAA3K,GAAwC,IAArCyN,EAAqCzN,EAArCyN,YAAaC,EAAwB1N,EAAxB0N,KAAMC,EAAkB3N,EAAlB2N,KAAM7H,EAAY9F,EAAZ8F,MAC9D8H,EAD0EC,EAAAvH,KAC1EsH,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEnDO,EAAyB,CAC9B,CACCC,KAAI,cACJC,QAASJ,GAEV,CACCK,SAAQ,WACRD,QAASpI,GAEV,CACCqI,SAAQ,iBACRD,QAASJ,GAEV,CACCK,SAAQ,UACRD,QAAO,WAER,CACCD,KAAI,eACJC,QAAO,WAER,CACCD,KAAI,kBACJC,QAASN,EAAKG,aAAaK,QAE5B,CACCH,KAAI,gBACJC,QAASpI,GAEV,CACCmI,KAAI,sBACJC,QAASJ,IAIX,OACCO,EAAA,cAACC,EAAAnO,EAAD,CACCoO,eAAgB,CACfb,QAED5H,MAAOA,EACP0I,cAAa,QAAUZ,EAAKG,aAAajI,MACzC6H,KAAMK,EAASS,OAAOd,MAKzBhD,EAAI+D,aAAe,CAClBhB,KAAI,KACJC,KAAM,GACNF,YAAW,IAGG9C,0MCrFTgE,EAAmB,SAAA3O,GAAiC,IAA9B4O,EAA8B5O,EAA9B4O,SAAUC,EAAoB7O,EAApB6O,cACpC,OAAKA,EAGEpF,IAAMwC,cAAc6C,IAApBjP,OAAAC,OAAA,CACL8O,WACAC,iBACGA,EAAc1J,OALV,MASXwJ,EAAiBI,UAAY,CAC3BH,SAAUxB,IAAU4B,MAAM,CACxBnL,SAAUuJ,IAAUE,OAAOC,aAC1BA,YAGUoB,uYCDAM,UAZkC,SAAAjP,GAAA,IAAAkP,EAAAlP,EAAGmP,iBAAH,IAAAD,EAAe,GAAfA,EAAA,OAChD9F,EAAA,qBAAKN,UAAU,gBACdM,EAAA,qBAAKN,UAAU,yBACdM,EAAA,qBAAKN,UAAU,uBACdM,EAAA,cAACgG,EAAA,EAAD,CAAM1D,GAAG,IAAI5C,UAAU,sBACrBqG,iECCSE,EAL2C,SAAArP,GAAwC,IAArCiO,EAAqCjO,EAArCiO,KAAMnF,EAA+B9I,EAA/B8I,UAAcC,EAAiBC,IAAAhJ,EAAA,sBAC3FsP,EAAUjG,IAAE,aAAc4E,EAAd,QAA2BnF,GAC7C,OAAOM,EAAA,kBAAAvJ,OAAAC,OAAA,CAAGgJ,UAAWwG,GAAavG,uDCH7BwG,UAAeC,YAAe,CACnCC,GAAI,CAAE5J,GAAI,mCAAoC4E,eAAgB,WAC9DgB,GAAI,CAAE5F,GAAI,mCAAoC4E,eAAgB,WAC9DiF,GAAI,CAAE7J,GAAI,sCAAuC4E,eAAgB,iBAuCnDkF,cA/B2D,SAAA3P,GAIpE,IAHL4P,EAGK5P,EAHL4P,KACA9G,EAEK9I,EAFL8I,UAEK+G,EAAA7P,EADL8P,aACK,IAAAD,EADGzG,EAAA,cAACoB,EAAA,EAAD,CAAkB3E,GAAG,0BAA0B4E,eAAe,sCACjEoF,EACC1I,EAAWkD,cACX0F,EAASxF,YAAYyF,KAM3B,OACC5G,EAAA,qBAAKN,UAAWO,IAAG,mBAAoBP,IACrCgH,GAAS1G,EAAA,qBAAKN,UAAU,2BAA2BgH,GACpD1G,EAAA,qBAAKN,UAAU,qCACdM,EAAA,wBAAQ6G,MAAOF,EAAQG,SARL,SAACC,GACrBhJ,EAASiJ,YAAeD,EAAME,OAAOJ,SAOYnH,UAAU,4BACvDjJ,OAAOyQ,KAAKf,GAAczI,IAAI,SAACkE,EAAKF,GACpC,OACC1B,EAAA,wBAAQ4B,IAAKF,EAAOmF,MAAOjF,GACzB4E,EAAKW,cAAehB,EAAqBvE,OAJ9C,SCbWwF,UAfyB,kBACvCpH,EAAA,qBAAKN,UAAU,gBACdM,EAAA,qBAAKN,UAAU,yBACdM,EAAA,+BACI,IAAIqH,MAAOC,cADf,KAC+BtH,EAAA,cAACoB,EAAA,EAAD,CAAkB3E,GAAG,oBAAoB4E,eAAe,eADvF,IAGCrB,EAAA,mBAAGuH,KAAK,4BAAR,UACQvH,EAAA,cAACwH,EAAD,CAAU3C,KAAK,YAGxB7E,EAAA,cAACyH,EAAD,iBCsBY3E,IApBkC,SAAAlM,GAAwC,IAArC2I,EAAqC3I,EAArC2I,SAAqCmI,EAAA9Q,EAA3B+Q,qBAA2B,IAAAD,KAClFxK,EAAO0K,EAAA1K,KAUb,OACC8C,EAAA,qBAAKN,UAAU,UACdM,EAAA,cAAC6H,EAAD,CAAQ9B,UAAW7I,EAAKsH,KAAKG,aAAajI,QAC1CsD,EAAA,qBAAKN,UAAU,mBAAmBH,GACjCoI,GAAiB3H,EAAA,cAAC8H,EAAD","file":"component---src-pages-photos-tsx-494eb939ed7b4e25cce5.js","sourcesContent":["import { isUndefined, isNumber } from 'helpers/check';\nimport { IPaginationRequestParams } from 'helpers/definitions';\n\nexport interface IHasMoreDataOptions {\n\toffset?: number;\n\tpreviousLength?: number;\n\tlength: number;\n\ttotalCount: number;\n}\n\n/**\n * Check if there is more available data to be fetched on the API, the previous amount could be a previous count or\n * an offset value, if the offset is present that will be used to do the check\n *\n * @param {IHasMoreDataOptions} options\n *\n * @returns {boolean} boolean\n */\nexport const hasMoreData = (options: IHasMoreDataOptions): boolean => {\n\tconst { offset, previousLength, length, totalCount } = options;\n\n\tif (isUndefined(offset) && isUndefined(previousLength) && isNumber(length) && isNumber(totalCount)) {\n\t\treturn length > 0 && length < totalCount - 1; // totalCount - 1, because the JS Array first index is 0\n\t}\n\n\tif (isNumber(length) && isNumber(totalCount) && (isNumber(offset) || isNumber(previousLength))) {\n\t\tconst currentTotal = (offset ? offset : previousLength || 0) + length;\n\t\treturn length > 0 && currentTotal < totalCount - 1; // totalCount - 1, because the JS Array first index is 0\n\t}\n\n\treturn false;\n};\n\n/**\n * Process and update the pagination params attributes\n *\n * @param {T extends IPaginationRequestParams = IPaginationRequestParams} params\n *\n * @returns {T} processed params\n */\nexport const updatePaginationAttributes = <T extends IPaginationRequestParams = IPaginationRequestParams>(\n\tparams: T\n): T => {\n\tconst { countPerPage, previousTotalCount } = params;\n\tlet { offset, page } = params;\n\n\tif (offset || page) {\n\t\treturn params;\n\t}\n\n\tif (isNumber(previousTotalCount)) {\n\t\tif (isUndefined(offset) && isUndefined(page)) {\n\t\t\tparams.page = Math.floor(previousTotalCount / countPerPage);\n\t\t\treturn params;\n\t\t}\n\t}\n\n\treturn {\n\t\t...params,\n\t\tpage: 0,\n\t};\n};\n\nexport default {\n\tupdatePaginationAttributes,\n\thasMoreData,\n};\n","/**\n * transform a binary image to its base64 image string\n *\n * @param {Blob} imageBlob - image binary\n * @return {string} image as a base64 string\n */\nexport const readImageBlobAsDataURL = async (imageBlob: Blob): Promise<string> => {\n\tconst imageReader = new FileReader();\n\treturn new Promise<string>(resolve => {\n\t\tconst load = () => {\n\t\t\timageReader.removeEventListener('load', load);\n\t\t\tresolve(imageReader.result as string);\n\t\t};\n\t\timageReader.addEventListener('load', load, false);\n\t\timageReader.readAsDataURL(imageBlob);\n\t});\n};\n\nexport default readImageBlobAsDataURL;\n","import * as path from 'path';\nimport * as url from 'url';\nimport * as qs from 'qs';\nimport {\n\tIDictionary,\n\tRequestContentTypes,\n\tRequestProtocol,\n\tRequestMethod,\n\tTRequestBody,\n\tIRequestOptions,\n\tIAPIResponse,\n\tTAPIResponse,\n} from 'helpers/definitions';\nimport readImageBlobAsDataURL from './readImageBlobAsDataURL';\n\n/**\n * Build an output response object that implements the IAPIResponse readonly attributes\n *\n * @param {Response} response\n * @param {any} body\n *\n * @returns {R} output response object\n */\nfunction buildResponseOutput<R extends IAPIResponse = TAPIResponse>(\n\tresponse: Response,\n\tbodyObject: Pick<R, '__bodyType__'> = {}\n): R {\n\tconst { status, headers } = response;\n\treturn {\n\t\tget statusCode() {\n\t\t\treturn status;\n\t\t},\n\t\tget headers() {\n\t\t\treturn headers;\n\t\t},\n\t\tget body() {\n\t\t\treturn bodyObject;\n\t\t},\n\t} as R;\n}\n\n/**\n * \tBuild and handle a fetch request\n *\n * @param {IRequestOptions} options\n *\n * @returns {Promise<R extends IAPIResponse = IAPIResponse>} promise\n */\nexport async function buildRequest<R extends IAPIResponse = IAPIResponse>(options: IRequestOptions): Promise<R> {\n\tlet { parameters } = options;\n\tconst {\n\t\tauthorization,\n\t\tmethod = RequestMethod.GET,\n\t\tcontentType = RequestContentTypes.JSON,\n\t\tprotocol = RequestProtocol.HTTPS,\n\t\thost,\n\t\tapi,\n\t\turlPath,\n\t\tvariables = {},\n\t\tnoCache,\n\t} = options;\n\n\t/**\n\t * No cache parameter\n\t */\n\tif (noCache) {\n\t\tparameters = { ...parameters, _: Math.random() };\n\t}\n\n\tconst getRequestURL = () => {\n\t\tconst pathname = api ? path.join(api, urlPath) : urlPath;\n\t\tif (!host) {\n\t\t\treturn pathname;\n\t\t}\n\n\t\treturn url.format({\n\t\t\tslashes: true,\n\t\t\tprotocol,\n\t\t\thost,\n\t\t\tpathname,\n\t\t});\n\t};\n\n\t/**\n\t * Request URL is the URL that we will call and all the variable is replaced to values\n\t * @type {string}\n\t */\n\tlet requestUrl = getRequestURL();\n\n\t/**\n\t * Replace url path variables, like {userId}\n\t */\n\tfor (const variable in variables) {\n\t\tif (variables.hasOwnProperty(variable)) {\n\t\t\trequestUrl = requestUrl.replace(`{${variable}}`, variables[variable]);\n\t\t}\n\t}\n\n\t/**\n\t * Prepare parameters that will be sent to the api.\n\t */\n\tlet body: TRequestBody;\n\tif (parameters) {\n\t\tswitch (method) {\n\t\t\tcase RequestMethod.GET:\n\t\t\t\trequestUrl += `?${qs.stringify(parameters)}`;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tswitch (contentType) {\n\t\t\t\t\tcase RequestContentTypes.JSON:\n\t\t\t\t\t\tbody = JSON.stringify(parameters);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RequestContentTypes.FORM:\n\t\t\t\t\t\tbody = new FormData();\n\t\t\t\t\t\tfor (const parameter in parameters) {\n\t\t\t\t\t\t\tif (parameters.hasOwnProperty(parameter)) {\n\t\t\t\t\t\t\t\tbody.append(parameter, parameters[parameter]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Prepare headers\n\t */\n\tconst headers: IDictionary = {\n\t\tAccept: contentType,\n\t\t'Content-Type': contentType,\n\t};\n\n\t/**\n\t * If there is any authorization added to the header\n\t */\n\tif (authorization) {\n\t\theaders.Authorization = authorization;\n\t}\n\n\t/**\n\t * Do the fetch call and process its response\n\t */\n\ttry {\n\t\tconst response = await fetch(requestUrl, {\n\t\t\tmethod,\n\t\t\theaders,\n\t\t\tbody,\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tthrow response;\n\t\t}\n\n\t\tlet outputObject = {};\n\t\tif (contentType === RequestContentTypes.IMAGE) {\n\t\t\tconst imageBlob = await response.blob();\n\t\t\tconst imageAsString = await readImageBlobAsDataURL(imageBlob);\n\t\t\toutputObject = imageAsString;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\toutputObject = await response.json();\n\t\t\t} catch (e) {\n\t\t\t\t/* comment to fix the tslint empty block warning */\n\t\t\t}\n\t\t}\n\t\treturn buildResponseOutput<R>(response, outputObject);\n\t} catch (error) {\n\t\tlet finalError: R;\n\t\ttry {\n\t\t\tfinalError = await error.json();\n\t\t} catch (e) {\n\t\t\tfinalError = error;\n\t\t}\n\t\tthrow buildResponseOutput<R>(error, finalError);\n\t}\n}\n\nexport default buildRequest;\n","import * as React from 'react';\nimport cn from 'classnames';\n\nimport './_styles.scss';\n\nexport enum EImageCard {\n\tSQUARE = 'square',\n\tRECTANGLE = 'rectangle',\n}\n\ninterface IImageCardProps {\n\turl: string;\n\ttype?: EImageCard;\n\tclassName?: string;\n}\n\nconst ImageCard: React.FunctionComponent<IImageCardProps> = ({ url, type = EImageCard.RECTANGLE, className }) => {\n\tconst props = {\n\t\tclassName: cn(className, 'imagecard', `imagecard--${type}`),\n\t\tstyle: {\n\t\t\tbackgroundImage: `url('${url}')`,\n\t\t},\n\t};\n\n\treturn <div {...props}></div>;\n};\n\nexport default ImageCard;\n","import { IBaseModel } from 'helpers/definitions';\nimport { IPhotoEntity } from 'data/schemas/JsonPlaceholder';\n\nexport interface IPhotoProps extends IPhotoEntity {}\n\nexport interface IPhotoModel extends IBaseModel<IPhotoProps> {\n\treadonly id: number;\n\treadonly title: string;\n\treadonly url: string;\n}\n\nexport default class PhotoModel implements IPhotoModel {\n\tprivate props: IPhotoProps;\n\n\tconstructor(props: IPhotoProps) {\n\t\tthis.props = props;\n\t}\n\n\tget __innerprops__() {\n\t\treturn this.props;\n\t}\n\n\tget id() {\n\t\treturn this.props.id;\n\t}\n\n\tget title() {\n\t\treturn this.props.title;\n\t}\n\n\tget url() {\n\t\treturn `http://lorempixel.com/600/400/?_=${this.props.id}}`;\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tid: this.id,\n\t\t\ttitle: this.title,\n\t\t\turl: this.url,\n\t\t};\n\t}\n}\n","import buildRequest from 'helpers/fetch/buildRequest';\nimport { isNumber } from 'helpers/check';\nimport { IAPIResponse, APIResponseStatus, DEFAULT_PAGE_SIZE } from 'helpers/definitions';\nimport PhotoModel from 'data/models/Photos';\nimport { IPhotosParams, IPhotosAPIResponse, IPhotosResponse } from './definitions';\n\nexport const loadPhotos = async (parameters?: IPhotosParams): Promise<IPhotosResponse> => {\n\tlet apiParams;\n\tif (parameters) {\n\t\tconst { offset, page = 0, countPerPage = DEFAULT_PAGE_SIZE } = parameters;\n\t\tconst _start = isNumber(offset) ? offset : page * countPerPage;\n\t\tapiParams = { _start, _limit: countPerPage };\n\t}\n\n\ttry {\n\t\tconst responseObject = await buildRequest<IPhotosAPIResponse>({\n\t\t\thost: 'jsonplaceholder.typicode.com',\n\t\t\turlPath: 'photos',\n\t\t\tparameters: apiParams,\n\t\t});\n\n\t\tconst { statusCode, headers, body } = responseObject;\n\t\tconst xTotalCount = headers.get('x-total-count') || 0;\n\t\tconst totalCount = Number(xTotalCount);\n\t\tconst data = body.map(entity => new PhotoModel(entity));\n\t\treturn {\n\t\t\tstatus: APIResponseStatus.SUCCESS,\n\t\t\tstatusCode,\n\t\t\tdata,\n\t\t\ttotalCount,\n\t\t};\n\t} catch (e) {\n\t\tconst errorObject: IAPIResponse = e;\n\t\tconst { statusCode, body } = errorObject;\n\t\tthrow {\n\t\t\tstatus: APIResponseStatus.ERROR,\n\t\t\tstatusCode,\n\t\t\tbody,\n\t\t};\n\t}\n};\n","import { Dispatch } from 'redux';\n\nimport { updatePaginationAttributes, hasMoreData } from 'helpers/fetch/pagination';\n\nimport * as API from 'data/api/photos';\n\nimport { photosFetching, photosFetchError, photosLoaded, photosReset } from './actions';\nimport { IPhotosAction, IPhotosLoadParams } from './definitions';\n\nexport const loadPhotos = (params?: IPhotosLoadParams) => async (dispatch: Dispatch<IPhotosAction>) => {\n\tconst { offset, page, countPerPage } = updatePaginationAttributes(params || { countPerPage: 50 });\n\tdispatch(photosFetching());\n\ttry {\n\t\tconst responseObject = await API.loadPhotos({ offset, page, countPerPage });\n\t\tconst { data: list, totalCount = 0 } = responseObject;\n\t\tconst { length } = list;\n\t\tconst hasMore = hasMoreData({ length, totalCount });\n\t\tdispatch(photosLoaded({ list, hasMore, isFetching: false }));\n\t} catch (e) {\n\t\tdispatch(photosFetchError());\n\t\tconsole.log(e);\n\t}\n};\n\nexport const resetPhotos = photosReset;\n","import { PhotosActionTypes as Types, IPhotosAction, IPhotosState } from './definitions';\n\nexport const photosFetching = (): IPhotosAction => ({\n\ttype: Types.FETCHING,\n});\n\nexport const photosLoaded = (payload: IPhotosState): IPhotosAction => ({\n\ttype: Types.LOADED,\n\tpayload,\n});\n\nexport const photosFetchError = (): IPhotosAction => ({\n\ttype: Types.FETCH_ERROR,\n});\n\nexport const photosReset = (): IPhotosAction => ({\n\ttype: Types.RESET,\n});\n","import { IRootState } from 'store/definitions';\n\nexport const selectPhotos = (state: IRootState) => state.photos;\n\nexport const selectPhotosList = (state: IRootState) => selectPhotos(state).list;\n\nexport const selectPhotoById = (id: number) => (state: IRootState) =>\n\tselectPhotosList(state).find(photo => photo.id === id);\n\nexport const selectHasMore = (state: IRootState) => selectPhotos(state).hasMore;\n\nexport const selectIsFetching = (state: IRootState) => selectPhotos(state).isFetching;\n","import * as React from 'react';\nimport cn from 'classnames';\nimport { TFunction, IDictionary } from 'helpers/definitions';\n\ninterface ITileProps {\n\tkey?: string | number;\n\tcolSpan?: number;\n\trowSpan?: number;\n\tclassName?: string;\n\tonClick?: TFunction;\n}\n\nconst Tile: React.FunctionComponent<ITileProps> = ({ children, colSpan, rowSpan, className, ...otherProps }) => {\n\tlet style: IDictionary<string> = {};\n\tif (colSpan) {\n\t\tstyle.gridColumn = `span ${colSpan} / auto`;\n\t}\n\tif (rowSpan) {\n\t\tstyle.gridRow = `span ${rowSpan} / auto`;\n\t}\n\treturn (\n\t\t<div\n\t\t\t{...{\n\t\t\t\tclassName: cn('tile', className),\n\t\t\t\tstyle,\n\t\t\t\t...otherProps,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nexport default Tile;\n","import * as React from 'react';\nimport cn from 'classnames';\n\nexport { default as Tile } from './Tile';\n\nimport './_styles.scss';\n\nexport interface ITilesProps {\n\tclassName?: string;\n\tgutter?: string;\n\tchildren: React.ReactNode;\n}\n\nexport const Tiles: React.FunctionComponent<ITilesProps> = ({ gutter, className, children }) => {\n\tconst tilesRef = React.useRef<HTMLDivElement>(null);\n\n\tReact.useEffect(() => {\n\t\tconst { current: tiles } = tilesRef;\n\t\tif (tiles && !className && gutter) {\n\t\t\ttiles.style.setProperty('--tiles-gutter', gutter);\n\t\t}\n\t}, [gutter, className]);\n\n\treturn (\n\t\t<div ref={tilesRef} className={cn('tiles', className)}>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nexport default Tiles;\n","import * as React from 'react';\n\nimport ImageCard from 'components/ui/ImageCard';\nimport PhotoModel from 'data/models/Photos';\n\nimport './_styles.scss';\n\nexport interface IPhotoCard {\n\tdata: PhotoModel;\n}\n\nconst PhotoCard: React.FunctionComponent<IPhotoCard> = ({ data: { url, title } }) => (\n\t<div className=\"photocard\">\n\t\t<ImageCard url={url} />\n\t\t<div className=\"photocard__title\">{title}</div>\n\t</div>\n);\n\nexport default PhotoCard;\n","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport { RouteComponentProps, navigate } from '@reach/router';\n\nimport { selectPhotosList, selectHasMore, selectIsFetching } from 'store/state/photos/selectors';\nimport { loadPhotos } from 'store/state/photos/operations';\nimport PhotoModel from 'data/models/Photos';\n\nimport SEO from 'components/SEO';\nimport { Tiles, Tile } from 'components/ui/Tiles';\n\nimport PhotoCard from 'domains/Photos/Card';\n\nimport './_styles.scss';\n\nconst countPerPage = 18;\n\nexport interface IPhotosList extends RouteComponentProps {}\n\nconst PhotosList: React.FunctionComponent<IPhotosList> = () => {\n\tconst dispatch = useDispatch();\n\tconst photosList = useSelector(selectPhotosList);\n\tconst hasMore = useSelector(selectHasMore);\n\tconst isFetching = useSelector(selectIsFetching);\n\n\tReact.useEffect(() => {\n\t\tdispatch(loadPhotos({ page: 0, countPerPage, previousTotalCount: photosList.length }));\n\t}, []);\n\n\tconst navigateToPhoto = (id: number) => () => navigate(`\u001c/photos/${id}`);\n\n\tconst buildTileElement = (item: PhotoModel, index: number) => (\n\t\t<Tile key={index} onClick={navigateToPhoto(item.id)}>\n\t\t\t<PhotoCard data={item} />\n\t\t</Tile>\n\t);\n\n\tconst onLoadMoreClick = () => {\n\t\tdispatch(loadPhotos({ countPerPage, previousTotalCount: photosList.length }));\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<FormattedMessage id=\"photos.pagetitle\" defaultMessage=\"Photos\">\n\t\t\t\t{text => <SEO title={text as string} />}\n\t\t\t</FormattedMessage>\n\n\t\t\t<div className=\"photos\">\n\t\t\t\t<Tiles className=\"photos__tiles\">{photosList.map(buildTileElement)}</Tiles>\n\n\t\t\t\t{!isFetching && hasMore && (\n\t\t\t\t\t<div className=\"photos__hasmore\">\n\t\t\t\t\t\t<button onClick={onLoadMoreClick}>\n\t\t\t\t\t\t\t<FormattedMessage id=\"photos.loadmore\" defaultMessage=\"Load more\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\n\t\t\t\t{isFetching && (\n\t\t\t\t\t<div className=\"photos__hasmore\">\n\t\t\t\t\t\t<FormattedMessage id=\"photos.loading\" defaultMessage=\"Loading...\" />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default React.memo(PhotosList);\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RouteComponentProps, Link } from '@reach/router';\nimport { useSelector } from 'react-redux';\n\nimport { selectPhotoById } from 'store/state/photos/selectors';\n\nimport SEO from 'components/SEO';\n\nimport PhotoCard from 'domains/Photos/Card';\n\nimport './_styles.scss';\n\ninterface IPhotoViewParams {\n\tid: string;\n}\n\nexport interface IPhotoView extends RouteComponentProps<IPhotoViewParams> {}\n\nconst PhotoView: React.FunctionComponent<IPhotoView> = ({ id }) => {\n\tconst photo = useSelector(selectPhotoById(Number(id)));\n\tconst info = photo ? photo.id : 'Not Found';\n\treturn (\n\t\t<>\n\t\t\t<FormattedMessage id=\"photo.pagetitle\" defaultMessage=\"Photo {id}\" values={{ id: info }}>\n\t\t\t\t{text => <SEO title={text as string} />}\n\t\t\t</FormattedMessage>\n\t\t\t<div className=\"photo\">\n\t\t\t\t{photo ? (\n\t\t\t\t\t<PhotoCard data={photo} />\n\t\t\t\t) : (\n\t\t\t\t\t<FormattedMessage id=\"photo.not-found\" defaultMessage=\"Photo: {id} - Not Found\" values={{ id }} />\n\t\t\t\t)}\n\t\t\t\t<Link to=\"/photos\" className=\"photo__link\">\n\t\t\t\t\t<FormattedMessage id=\"photo.return-to-photos\" defaultMessage=\"Return to photos\" />\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default React.memo(PhotoView);\n","import * as React from 'react';\nimport { Router, RouteComponentProps } from '@reach/router';\nimport { useDispatch } from 'react-redux';\n\nimport { resetPhotos } from 'store/state/photos/operations';\n\nimport PhotosList from './List';\nimport PhotoView from './View';\n\nexport interface IPhotos extends RouteComponentProps {}\n\nconst Photos: React.FunctionComponent<IPhotos> = () => {\n\tconst dispatch = useDispatch();\n\n\tReact.useEffect(() => {\n\t\treturn () => {\n\t\t\tdispatch(resetPhotos());\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<Router basepath=\"photos\">\n\t\t\t<PhotosList path=\"/\" />\n\t\t\t<PhotoView path=\":id\" />\n\t\t</Router>\n\t);\n};\n\nexport default Photos;\n","import React from 'react';\n\nimport Layout from 'components/Layout';\n\nimport Photos from 'domains/Photos';\n\nconst PhotosPage = () => (\n\t<Layout>\n\t\t<Photos />\n\t</Layout>\n);\n\nexport default PhotosPage;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ntype TMetaProps = JSX.IntrinsicElements['meta'];\n\ninterface ISEO {\n\ttitle: string;\n\tdescription?: string;\n\tlang?: string;\n\tmeta?: TMetaProps[];\n}\n\nconst SEO: React.FunctionComponent<ISEO> = ({ description, lang, meta, title }) => {\n\tconst { site } = useStaticQuery(\n\t\tgraphql`\n\t\t\tquery {\n\t\t\t\tsite {\n\t\t\t\t\tsiteMetadata {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tdescription\n\t\t\t\t\t\tauthor\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t`\n\t);\n\n\tconst metaDescription = description || site.siteMetadata.description;\n\n\tconst baseMeta: TMetaProps[] = [\n\t\t{\n\t\t\tname: `description`,\n\t\t\tcontent: metaDescription,\n\t\t},\n\t\t{\n\t\t\tproperty: `og:title`,\n\t\t\tcontent: title,\n\t\t},\n\t\t{\n\t\t\tproperty: `og:description`,\n\t\t\tcontent: metaDescription,\n\t\t},\n\t\t{\n\t\t\tproperty: `og:type`,\n\t\t\tcontent: `website`,\n\t\t},\n\t\t{\n\t\t\tname: `twitter:card`,\n\t\t\tcontent: `summary`,\n\t\t},\n\t\t{\n\t\t\tname: `twitter:creator`,\n\t\t\tcontent: site.siteMetadata.author,\n\t\t},\n\t\t{\n\t\t\tname: `twitter:title`,\n\t\t\tcontent: title,\n\t\t},\n\t\t{\n\t\t\tname: `twitter:description`,\n\t\t\tcontent: metaDescription,\n\t\t},\n\t];\n\n\treturn (\n\t\t<Helmet\n\t\t\thtmlAttributes={{\n\t\t\t\tlang,\n\t\t\t}}\n\t\t\ttitle={title}\n\t\t\ttitleTemplate={`%s | ${site.siteMetadata.title}`}\n\t\t\tmeta={baseMeta.concat(meta!)}\n\t\t/>\n\t);\n};\n\nSEO.defaultProps = {\n\tlang: `en`,\n\tmeta: [] as TMetaProps[],\n\tdescription: ``,\n};\n\nexport default SEO;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as React from 'react';\nimport { Link } from 'gatsby';\n\nimport './_styles.scss';\n\ninterface IHeader {\n\tsiteTitle: string;\n}\n\nconst Header: React.FunctionComponent<IHeader> = ({ siteTitle = '' }) => (\n\t<div className=\"layoutheader\">\n\t\t<div className=\"layoutheader__content\">\n\t\t\t<div className=\"layoutheader__title\">\n\t\t\t\t<Link to=\"/\" className=\"layoutheader__link\">\n\t\t\t\t\t{siteTitle}\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\nexport default Header;\n","import * as React from 'react';\nimport cn from 'classnames';\n\nexport interface IFontIconProps {\n\tname: string;\n\tclassName?: string | string[];\n\ttitle?: string;\n\tonClick?: React.MouseEventHandler<HTMLElement>;\n}\n\nconst FontIcon: React.FunctionComponent<IFontIconProps> = ({ name, className, ...otherProps }) => {\n\tconst classes = cn(`icon icon-${name}_icon`, className);\n\treturn <i className={classes} {...otherProps}></i>;\n};\n\nexport default FontIcon;\n","import * as React from 'react';\nimport cn from 'classnames';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FormattedMessage, defineMessages, injectIntl, InjectedIntlProps } from 'react-intl';\nimport { changeLanguage } from 'store/state/language/operations';\nimport { selectLocale } from 'store/state/language/selectors';\n\nimport './_styles.scss';\n\nconst translations = defineMessages({\n\ten: { id: 'language.selector.option.english', defaultMessage: 'English' },\n\tes: { id: 'language.selector.option.spanish', defaultMessage: 'Spanish' },\n\tpt: { id: 'language.selector.option.portuguese', defaultMessage: 'Portuguese' },\n});\n\ninterface ILanguageSelectorProps extends InjectedIntlProps {\n\tclassName?: string;\n\tlabel?: React.ReactNode;\n}\n\nconst LanguageSelector: React.FunctionComponent<ILanguageSelectorProps> = ({\n\tintl,\n\tclassName,\n\tlabel = <FormattedMessage id=\"language.selector.label\" defaultMessage=\"Select another available language\" />,\n}) => {\n\tconst dispatch = useDispatch();\n\tconst locale = useSelector(selectLocale);\n\n\tconst handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n\t\tdispatch(changeLanguage(event.target.value));\n\t};\n\n\treturn (\n\t\t<div className={cn('languageselector', className)}>\n\t\t\t{label && <div className=\"languageselector__label\">{label}</div>}\n\t\t\t<div className=\"languageselector__selectcontainer\">\n\t\t\t\t<select value={locale} onChange={handleChange} className=\"languageselector__select\">\n\t\t\t\t\t{Object.keys(translations).map((key, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<option key={index} value={key}>\n\t\t\t\t\t\t\t\t{intl.formatMessage((translations as any)[key])}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t\t}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default injectIntl(LanguageSelector);\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport FontIcon from 'components/ui/FontIcon';\nimport LanguageSelector from 'components/LanguageSelector';\n\nimport './_styles.scss';\n\nconst Footer: React.FunctionComponent = () => (\n\t<div className=\"layoutfooter\">\n\t\t<div className=\"layoutfooter__content\">\n\t\t\t<div>\n\t\t\t\t© {new Date().getFullYear()}, <FormattedMessage id=\"layout.build-with\" defaultMessage=\"Built with\" />\n\t\t\t\t{` `}\n\t\t\t\t<a href=\"https://www.gatsbyjs.org\">\n\t\t\t\t\tGatsby <FontIcon name=\"heart\" />\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<LanguageSelector />\n\t\t</div>\n\t</div>\n);\n\nexport default Footer;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Header from './Header';\nimport Footer from './Footer';\n\nimport './_styles.scss';\n\ninterface ILayout {\n\tchildren: React.ReactNode;\n\tdisplayFooter?: boolean;\n}\n\nconst Layout: React.FunctionComponent<ILayout> = ({ children, displayFooter = true }) => {\n\tconst data = useStaticQuery(graphql`\n\t\tquery SiteTitleQuery {\n\t\t\tsite {\n\t\t\t\tsiteMetadata {\n\t\t\t\t\ttitle\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\n\treturn (\n\t\t<div className=\"layout\">\n\t\t\t<Header siteTitle={data.site.siteMetadata.title} />\n\t\t\t<div className=\"layout__content\">{children}</div>\n\t\t\t{displayFooter && <Footer />}\n\t\t</div>\n\t);\n};\n\nexport default Layout;\n"],"sourceRoot":""}